
LED squence V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea1  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d9  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070e  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f8  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
  64:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <app_init>:
 */ 
#include"APP.h"

void app_init(void)
{
	LED_init(Port_A,PIN_0);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	81 e4       	ldi	r24, 0x41	; 65
  70:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_init>
	LED_init(Port_A,PIN_1);
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	81 e4       	ldi	r24, 0x41	; 65
  78:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_init>
	LED_init(Port_A,PIN_2);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_init>
	LED_init(Port_A,PIN_3);
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_init>
	PB_init(Port_D,PIN_0);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	84 e4       	ldi	r24, 0x44	; 68
  90:	0e 94 50 01 	call	0x2a0	; 0x2a0 <PB_init>
  94:	08 95       	ret

00000096 <app>:
}

void app(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t error=0;
	uint8_t state=0;
  a0:	19 82       	std	Y+1, r1	; 0x01
	error = PB_state(Port_D, PIN_0, &state);
  a2:	ae 01       	movw	r20, r28
  a4:	4f 5f       	subi	r20, 0xFF	; 255
  a6:	5f 4f       	sbci	r21, 0xFF	; 255
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	84 e4       	ldi	r24, 0x44	; 68
  ac:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
	if(state==Pressed)
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	09 f0       	breq	.+2      	; 0xb8 <app+0x22>
  b6:	de c0       	rjmp	.+444    	; 0x274 <app+0x1de>
	{
		LED_ON(Port_A,PIN_0);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	0e 94 44 01 	call	0x288	; 0x288 <LED_ON>
		while(state==Pressed)
  c0:	07 c0       	rjmp	.+14     	; 0xd0 <app+0x3a>
		{
			PB_state(Port_D, PIN_0, &state);
  c2:	ae 01       	movw	r20, r28
  c4:	4f 5f       	subi	r20, 0xFF	; 255
  c6:	5f 4f       	sbci	r21, 0xFF	; 255
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	84 e4       	ldi	r24, 0x44	; 68
  cc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
	uint8_t state=0;
	error = PB_state(Port_D, PIN_0, &state);
	if(state==Pressed)
	{
		LED_ON(Port_A,PIN_0);
		while(state==Pressed)
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	b1 f3       	breq	.-20     	; 0xc2 <app+0x2c>
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <app+0x50>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
  d8:	ae 01       	movw	r20, r28
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	84 e4       	ldi	r24, 0x44	; 68
  e2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		LED_ON(Port_A,PIN_0);
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	88 23       	and	r24, r24
  ea:	b1 f3       	breq	.-20     	; 0xd8 <app+0x42>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	61 f4       	brne	.+24     	; 0x108 <app+0x72>
		{
			LED_ON(Port_A,PIN_1);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 44 01 	call	0x288	; 0x288 <LED_ON>
  f8:	07 c0       	rjmp	.+14     	; 0x108 <app+0x72>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
  fa:	ae 01       	movw	r20, r28
  fc:	4f 5f       	subi	r20, 0xFF	; 255
  fe:	5f 4f       	sbci	r21, 0xFF	; 255
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	84 e4       	ldi	r24, 0x44	; 68
 104:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_ON(Port_A,PIN_1);
		}
		while(state==Pressed)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	b1 f3       	breq	.-20     	; 0xfa <app+0x64>
 10e:	07 c0       	rjmp	.+14     	; 0x11e <app+0x88>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 110:	ae 01       	movw	r20, r28
 112:	4f 5f       	subi	r20, 0xFF	; 255
 114:	5f 4f       	sbci	r21, 0xFF	; 255
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	88 23       	and	r24, r24
 122:	b1 f3       	breq	.-20     	; 0x110 <app+0x7a>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	61 f4       	brne	.+24     	; 0x140 <app+0xaa>
		{
			LED_ON(Port_A,PIN_2);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 44 01 	call	0x288	; 0x288 <LED_ON>
 130:	07 c0       	rjmp	.+14     	; 0x140 <app+0xaa>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 132:	ae 01       	movw	r20, r28
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	84 e4       	ldi	r24, 0x44	; 68
 13c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_ON(Port_A,PIN_2);
		}
		while(state==Pressed)
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	b1 f3       	breq	.-20     	; 0x132 <app+0x9c>
 146:	07 c0       	rjmp	.+14     	; 0x156 <app+0xc0>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 148:	ae 01       	movw	r20, r28
 14a:	4f 5f       	subi	r20, 0xFF	; 255
 14c:	5f 4f       	sbci	r21, 0xFF	; 255
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	84 e4       	ldi	r24, 0x44	; 68
 152:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	88 23       	and	r24, r24
 15a:	b1 f3       	breq	.-20     	; 0x148 <app+0xb2>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	61 f4       	brne	.+24     	; 0x178 <app+0xe2>
		{
			LED_ON(Port_A,PIN_3);
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	0e 94 44 01 	call	0x288	; 0x288 <LED_ON>
 168:	07 c0       	rjmp	.+14     	; 0x178 <app+0xe2>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 16a:	ae 01       	movw	r20, r28
 16c:	4f 5f       	subi	r20, 0xFF	; 255
 16e:	5f 4f       	sbci	r21, 0xFF	; 255
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	84 e4       	ldi	r24, 0x44	; 68
 174:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_ON(Port_A,PIN_3);
		}
		while(state==Pressed)
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	b1 f3       	breq	.-20     	; 0x16a <app+0xd4>
 17e:	07 c0       	rjmp	.+14     	; 0x18e <app+0xf8>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 180:	ae 01       	movw	r20, r28
 182:	4f 5f       	subi	r20, 0xFF	; 255
 184:	5f 4f       	sbci	r21, 0xFF	; 255
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	84 e4       	ldi	r24, 0x44	; 68
 18a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	88 23       	and	r24, r24
 192:	b1 f3       	breq	.-20     	; 0x180 <app+0xea>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	61 f4       	brne	.+24     	; 0x1b0 <app+0x11a>
		{
			LED_OFF(Port_A,PIN_0);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 4a 01 	call	0x294	; 0x294 <LED_OFF>
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <app+0x11a>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 1a2:	ae 01       	movw	r20, r28
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	84 e4       	ldi	r24, 0x44	; 68
 1ac:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_OFF(Port_A,PIN_0);
		}
		while(state==Pressed)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	b1 f3       	breq	.-20     	; 0x1a2 <app+0x10c>
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <app+0x130>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 1b8:	ae 01       	movw	r20, r28
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	84 e4       	ldi	r24, 0x44	; 68
 1c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	88 23       	and	r24, r24
 1ca:	b1 f3       	breq	.-20     	; 0x1b8 <app+0x122>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	61 f4       	brne	.+24     	; 0x1e8 <app+0x152>
		{
			LED_OFF(Port_A,PIN_1);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 4a 01 	call	0x294	; 0x294 <LED_OFF>
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <app+0x152>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 1da:	ae 01       	movw	r20, r28
 1dc:	4f 5f       	subi	r20, 0xFF	; 255
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	84 e4       	ldi	r24, 0x44	; 68
 1e4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_OFF(Port_A,PIN_1);
		}
		while(state==Pressed)
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	b1 f3       	breq	.-20     	; 0x1da <app+0x144>
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <app+0x168>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 1f0:	ae 01       	movw	r20, r28
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	84 e4       	ldi	r24, 0x44	; 68
 1fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 23       	and	r24, r24
 202:	b1 f3       	breq	.-20     	; 0x1f0 <app+0x15a>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	61 f4       	brne	.+24     	; 0x220 <app+0x18a>
		{
			LED_OFF(Port_A,PIN_2);
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 4a 01 	call	0x294	; 0x294 <LED_OFF>
 210:	07 c0       	rjmp	.+14     	; 0x220 <app+0x18a>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 212:	ae 01       	movw	r20, r28
 214:	4f 5f       	subi	r20, 0xFF	; 255
 216:	5f 4f       	sbci	r21, 0xFF	; 255
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	84 e4       	ldi	r24, 0x44	; 68
 21c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_OFF(Port_A,PIN_2);
		}
		while(state==Pressed)
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	b1 f3       	breq	.-20     	; 0x212 <app+0x17c>
 226:	07 c0       	rjmp	.+14     	; 0x236 <app+0x1a0>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 228:	ae 01       	movw	r20, r28
 22a:	4f 5f       	subi	r20, 0xFF	; 255
 22c:	5f 4f       	sbci	r21, 0xFF	; 255
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	84 e4       	ldi	r24, 0x44	; 68
 232:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	88 23       	and	r24, r24
 23a:	b1 f3       	breq	.-20     	; 0x228 <app+0x192>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		if(state==Pressed)
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	61 f4       	brne	.+24     	; 0x258 <app+0x1c2>
		{
			LED_OFF(Port_A,PIN_3);
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 4a 01 	call	0x294	; 0x294 <LED_OFF>
 248:	07 c0       	rjmp	.+14     	; 0x258 <app+0x1c2>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 24a:	ae 01       	movw	r20, r28
 24c:	4f 5f       	subi	r20, 0xFF	; 255
 24e:	5f 4f       	sbci	r21, 0xFF	; 255
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	84 e4       	ldi	r24, 0x44	; 68
 254:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		if(state==Pressed)
		{
			LED_OFF(Port_A,PIN_3);
		}
		while(state==Pressed)
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	b1 f3       	breq	.-20     	; 0x24a <app+0x1b4>
 25e:	07 c0       	rjmp	.+14     	; 0x26e <app+0x1d8>
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
		{
			PB_state(Port_D, PIN_0, &state);
 260:	ae 01       	movw	r20, r28
 262:	4f 5f       	subi	r20, 0xFF	; 255
 264:	5f 4f       	sbci	r21, 0xFF	; 255
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	84 e4       	ldi	r24, 0x44	; 68
 26a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <PB_state>
		}
		while(state==Pressed)
		{
			PB_state(Port_D, PIN_0, &state);
		}
		while(state==Not_pressed)
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	88 23       	and	r24, r24
 272:	b1 f3       	breq	.-20     	; 0x260 <app+0x1ca>
		{
			PB_state(Port_D, PIN_0, &state);
		}
	}
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <LED_init>:


uint8_t LED_init(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_init(Port_number, Pin_number, out) == 0 )
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_init>
 282:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
 284:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
 286:	08 95       	ret

00000288 <LED_ON>:


uint8_t LED_ON(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_write(Port_number, Pin_number, high) == 0)
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_write>
 28e:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
 290:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
 292:	08 95       	ret

00000294 <LED_OFF>:

uint8_t LED_OFF(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_write(Port_number, Pin_number, low) == 0)
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_write>
 29a:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
 29e:	08 95       	ret

000002a0 <PB_init>:
#include "Push_bottun.h"


uint8_t PB_init(uint8_t Port_number, uint8_t Pin_number)
{
	DIO_init(Port_number, Pin_number, in);
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_init>
}
 2a6:	08 95       	ret

000002a8 <PB_state>:

uint8_t PB_state(uint8_t Port_number, uint8_t Pin_number, uint8_t *state)
{
	uint8_t error = 0;
	if(DIO_read(Port_number, Pin_number, state) ==0)
 2a8:	0e 94 40 02 	call	0x480	; 0x480 <DIO_read>
 2ac:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
 2b0:	08 95       	ret

000002b2 <main>:
#include "ECUAL/Push Botton/Push_bottun.h"

int main(void)
{
    /* Replace with your application code */
	app_init();
 2b2:	0e 94 36 00 	call	0x6c	; 0x6c <app_init>
	
    while (1) 
    {
		app();
 2b6:	0e 94 4b 00 	call	0x96	; 0x96 <app>
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <main+0x4>

000002bc <DIO_init>:
			break;
		default:
			error=1;
	}
	return error;
}
 2bc:	82 34       	cpi	r24, 0x42	; 66
 2be:	19 f1       	breq	.+70     	; 0x306 <DIO_init+0x4a>
 2c0:	18 f4       	brcc	.+6      	; 0x2c8 <DIO_init+0xc>
 2c2:	81 34       	cpi	r24, 0x41	; 65
 2c4:	39 f0       	breq	.+14     	; 0x2d4 <DIO_init+0x18>
 2c6:	69 c0       	rjmp	.+210    	; 0x39a <DIO_init+0xde>
 2c8:	83 34       	cpi	r24, 0x43	; 67
 2ca:	b1 f1       	breq	.+108    	; 0x338 <DIO_init+0x7c>
 2cc:	84 34       	cpi	r24, 0x44	; 68
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_init+0x16>
 2d0:	4c c0       	rjmp	.+152    	; 0x36a <DIO_init+0xae>
 2d2:	63 c0       	rjmp	.+198    	; 0x39a <DIO_init+0xde>
 2d4:	41 11       	cpse	r20, r1
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <DIO_init+0x34>
 2d8:	2a b3       	in	r18, 0x1a	; 26
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_init+0x28>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_init+0x24>
 2e8:	80 95       	com	r24
 2ea:	82 23       	and	r24, r18
 2ec:	8a bb       	out	0x1a, r24	; 26
 2ee:	55 c0       	rjmp	.+170    	; 0x39a <DIO_init+0xde>
 2f0:	2a b3       	in	r18, 0x1a	; 26
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_init+0x40>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_init+0x3c>
 300:	82 2b       	or	r24, r18
 302:	8a bb       	out	0x1a, r24	; 26
 304:	4a c0       	rjmp	.+148    	; 0x39a <DIO_init+0xde>
 306:	41 11       	cpse	r20, r1
 308:	0c c0       	rjmp	.+24     	; 0x322 <DIO_init+0x66>
 30a:	27 b3       	in	r18, 0x17	; 23
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_init+0x5a>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_init+0x56>
 31a:	80 95       	com	r24
 31c:	82 23       	and	r24, r18
 31e:	87 bb       	out	0x17, r24	; 23
 320:	3c c0       	rjmp	.+120    	; 0x39a <DIO_init+0xde>
 322:	27 b3       	in	r18, 0x17	; 23
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_init+0x72>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_init+0x6e>
 332:	82 2b       	or	r24, r18
 334:	87 bb       	out	0x17, r24	; 23
 336:	31 c0       	rjmp	.+98     	; 0x39a <DIO_init+0xde>
 338:	41 11       	cpse	r20, r1
 33a:	0c c0       	rjmp	.+24     	; 0x354 <DIO_init+0x98>
 33c:	24 b3       	in	r18, 0x14	; 20
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_init+0x8c>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_init+0x88>
 34c:	80 95       	com	r24
 34e:	82 23       	and	r24, r18
 350:	84 bb       	out	0x14, r24	; 20
 352:	23 c0       	rjmp	.+70     	; 0x39a <DIO_init+0xde>
 354:	24 b3       	in	r18, 0x14	; 20
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_init+0xa4>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_init+0xa0>
 364:	82 2b       	or	r24, r18
 366:	84 bb       	out	0x14, r24	; 20
 368:	18 c0       	rjmp	.+48     	; 0x39a <DIO_init+0xde>
 36a:	41 11       	cpse	r20, r1
 36c:	0c c0       	rjmp	.+24     	; 0x386 <DIO_init+0xca>
 36e:	21 b3       	in	r18, 0x11	; 17
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_init+0xbe>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_init+0xba>
 37e:	80 95       	com	r24
 380:	82 23       	and	r24, r18
 382:	81 bb       	out	0x11, r24	; 17
 384:	0a c0       	rjmp	.+20     	; 0x39a <DIO_init+0xde>
 386:	21 b3       	in	r18, 0x11	; 17
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0xd6>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0xd2>
 396:	82 2b       	or	r24, r18
 398:	81 bb       	out	0x11, r24	; 17
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret

0000039e <DIO_write>:
 39e:	82 34       	cpi	r24, 0x42	; 66
 3a0:	19 f1       	breq	.+70     	; 0x3e8 <DIO_write+0x4a>
 3a2:	18 f4       	brcc	.+6      	; 0x3aa <DIO_write+0xc>
 3a4:	81 34       	cpi	r24, 0x41	; 65
 3a6:	39 f0       	breq	.+14     	; 0x3b6 <DIO_write+0x18>
 3a8:	69 c0       	rjmp	.+210    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3aa:	83 34       	cpi	r24, 0x43	; 67
 3ac:	b1 f1       	breq	.+108    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3ae:	84 34       	cpi	r24, 0x44	; 68
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_write+0x16>
 3b2:	4c c0       	rjmp	.+152    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 3b4:	63 c0       	rjmp	.+198    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3b6:	41 11       	cpse	r20, r1
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <DIO_write+0x34>
 3ba:	2b b3       	in	r18, 0x1b	; 27
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_write+0x28>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_write+0x24>
 3ca:	80 95       	com	r24
 3cc:	82 23       	and	r24, r18
 3ce:	8b bb       	out	0x1b, r24	; 27
 3d0:	55 c0       	rjmp	.+170    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_write+0x40>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_write+0x3c>
 3e2:	82 2b       	or	r24, r18
 3e4:	8b bb       	out	0x1b, r24	; 27
 3e6:	4a c0       	rjmp	.+148    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3e8:	41 11       	cpse	r20, r1
 3ea:	0c c0       	rjmp	.+24     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ec:	28 b3       	in	r18, 0x18	; 24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_write+0x5a>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_write+0x56>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	88 bb       	out	0x18, r24	; 24
 402:	3c c0       	rjmp	.+120    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	82 2b       	or	r24, r18
 416:	88 bb       	out	0x18, r24	; 24
 418:	31 c0       	rjmp	.+98     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 41a:	41 11       	cpse	r20, r1
 41c:	0c c0       	rjmp	.+24     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	80 95       	com	r24
 430:	82 23       	and	r24, r18
 432:	85 bb       	out	0x15, r24	; 21
 434:	23 c0       	rjmp	.+70     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 436:	25 b3       	in	r18, 0x15	; 21
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	82 2b       	or	r24, r18
 448:	85 bb       	out	0x15, r24	; 21
 44a:	18 c0       	rjmp	.+48     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 44c:	41 11       	cpse	r20, r1
 44e:	0c c0       	rjmp	.+24     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 450:	22 b3       	in	r18, 0x12	; 18
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	80 95       	com	r24
 462:	82 23       	and	r24, r18
 464:	82 bb       	out	0x12, r24	; 18
 466:	0a c0       	rjmp	.+20     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 468:	22 b3       	in	r18, 0x12	; 18
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	82 2b       	or	r24, r18
 47a:	82 bb       	out	0x12, r24	; 18
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	08 95       	ret

00000480 <DIO_read>:

uint8_t DIO_read(uint8_t PORTNumber, uint8_t PinNumber, uint8_t *state)
{
	uint8_t error=0;
	
	switch(PORTNumber)
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	21 f1       	breq	.+72     	; 0x4cc <DIO_read+0x4c>
 484:	18 f4       	brcc	.+6      	; 0x48c <DIO_read+0xc>
 486:	81 34       	cpi	r24, 0x41	; 65
 488:	39 f0       	breq	.+14     	; 0x498 <DIO_read+0x18>
 48a:	6e c0       	rjmp	.+220    	; 0x568 <DIO_read+0xe8>
 48c:	83 34       	cpi	r24, 0x43	; 67
 48e:	c1 f1       	breq	.+112    	; 0x500 <DIO_read+0x80>
 490:	84 34       	cpi	r24, 0x44	; 68
 492:	09 f4       	brne	.+2      	; 0x496 <DIO_read+0x16>
 494:	4f c0       	rjmp	.+158    	; 0x534 <DIO_read+0xb4>
 496:	68 c0       	rjmp	.+208    	; 0x568 <DIO_read+0xe8>
	{
		case Port_A:
			Clear_Bit(PORTA, PinNumber);
 498:	2b b3       	in	r18, 0x1b	; 27
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	06 2e       	mov	r0, r22
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_read+0x26>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_read+0x22>
 4aa:	38 2f       	mov	r19, r24
 4ac:	30 95       	com	r19
 4ae:	23 23       	and	r18, r19
 4b0:	2b bb       	out	0x1b, r18	; 27
			*state=Find_Bit(PINA,PinNumber);
 4b2:	29 b3       	in	r18, 0x19	; 25
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	82 23       	and	r24, r18
 4b8:	93 23       	and	r25, r19
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_read+0x40>
 4bc:	95 95       	asr	r25
 4be:	87 95       	ror	r24
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_read+0x3c>
 4c4:	fa 01       	movw	r30, r20
 4c6:	80 83       	st	Z, r24
	return error;
}

uint8_t DIO_read(uint8_t PORTNumber, uint8_t PinNumber, uint8_t *state)
{
	uint8_t error=0;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
	switch(PORTNumber)
	{
		case Port_A:
			Clear_Bit(PORTA, PinNumber);
			*state=Find_Bit(PINA,PinNumber);
			break;
 4ca:	08 95       	ret
		case Port_B:
			Clear_Bit(PORTB, PinNumber);
 4cc:	28 b3       	in	r18, 0x18	; 24
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	06 2e       	mov	r0, r22
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_read+0x5a>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_read+0x56>
 4de:	38 2f       	mov	r19, r24
 4e0:	30 95       	com	r19
 4e2:	23 23       	and	r18, r19
 4e4:	28 bb       	out	0x18, r18	; 24
			*state=Find_Bit(PINB,PinNumber);
 4e6:	26 b3       	in	r18, 0x16	; 22
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	82 23       	and	r24, r18
 4ec:	93 23       	and	r25, r19
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_read+0x74>
 4f0:	95 95       	asr	r25
 4f2:	87 95       	ror	r24
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_read+0x70>
 4f8:	fa 01       	movw	r30, r20
 4fa:	80 83       	st	Z, r24
	return error;
}

uint8_t DIO_read(uint8_t PORTNumber, uint8_t PinNumber, uint8_t *state)
{
	uint8_t error=0;
 4fc:	80 e0       	ldi	r24, 0x00	; 0
			*state=Find_Bit(PINA,PinNumber);
			break;
		case Port_B:
			Clear_Bit(PORTB, PinNumber);
			*state=Find_Bit(PINB,PinNumber);
			break;
 4fe:	08 95       	ret
		case Port_C:
			Clear_Bit(PORTC, PinNumber);
 500:	25 b3       	in	r18, 0x15	; 21
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	06 2e       	mov	r0, r22
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_read+0x8e>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_read+0x8a>
 512:	38 2f       	mov	r19, r24
 514:	30 95       	com	r19
 516:	23 23       	and	r18, r19
 518:	25 bb       	out	0x15, r18	; 21
			*state=Find_Bit(PINC,PinNumber);
 51a:	23 b3       	in	r18, 0x13	; 19
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	82 23       	and	r24, r18
 520:	93 23       	and	r25, r19
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_read+0xa8>
 524:	95 95       	asr	r25
 526:	87 95       	ror	r24
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_read+0xa4>
 52c:	fa 01       	movw	r30, r20
 52e:	80 83       	st	Z, r24
	return error;
}

uint8_t DIO_read(uint8_t PORTNumber, uint8_t PinNumber, uint8_t *state)
{
	uint8_t error=0;
 530:	80 e0       	ldi	r24, 0x00	; 0
			*state=Find_Bit(PINB,PinNumber);
			break;
		case Port_C:
			Clear_Bit(PORTC, PinNumber);
			*state=Find_Bit(PINC,PinNumber);
			break;
 532:	08 95       	ret
		case Port_D:
			Clear_Bit(PORTD, PinNumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	06 2e       	mov	r0, r22
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_read+0xc2>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	0a 94       	dec	r0
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_read+0xbe>
 546:	38 2f       	mov	r19, r24
 548:	30 95       	com	r19
 54a:	23 23       	and	r18, r19
 54c:	22 bb       	out	0x12, r18	; 18
			*state=Find_Bit(PIND,PinNumber);
 54e:	20 b3       	in	r18, 0x10	; 16
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	82 23       	and	r24, r18
 554:	93 23       	and	r25, r19
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_read+0xdc>
 558:	95 95       	asr	r25
 55a:	87 95       	ror	r24
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_read+0xd8>
 560:	fa 01       	movw	r30, r20
 562:	80 83       	st	Z, r24
	return error;
}

uint8_t DIO_read(uint8_t PORTNumber, uint8_t PinNumber, uint8_t *state)
{
	uint8_t error=0;
 564:	80 e0       	ldi	r24, 0x00	; 0
			*state=Find_Bit(PINC,PinNumber);
			break;
		case Port_D:
			Clear_Bit(PORTD, PinNumber);
			*state=Find_Bit(PIND,PinNumber);
			break;
 566:	08 95       	ret
		default:
			error=1;
 568:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return error;
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
